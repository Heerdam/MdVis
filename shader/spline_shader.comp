#version 430 core

#define M_PI 3.141592653589
#define M_PI_2 6.2831853071

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(location = 1) uniform unsigned int atomCount; //#atoms
layout(location = 2) uniform int maxSteps;
layout(location = 3) uniform float t; 

layout(location = 4) uniform unsigned int sphere_vertices;
layout(location = 5) uniform float radius;

layout(location = 6) uniform vec4 color;

layout(std430, binding = 1) readonly buffer traj {
	float traj_data[];
};

layout(std430, binding = 2) readonly buffer sphere {
	float sphere_data[];
};

layout(std430, binding = 3) writeonly buffer vertex {
	float ver_data[];
};

void main() {

	const int currentStepLow = int(float(maxSteps) * t) % maxSteps;
	const int currentStepUp = (int(float(maxSteps) * t) + 1) % maxSteps;
	const int offsetLow = int(currentStepLow) * int(atomCount) * 3;
	const int offsetUp = int(currentStepLow) * int(atomCount) * 3;
	const uint index = gl_GlobalInvocationID.x;
	const int vertexSize = 3;
	const uint verIndex = index * sphere_vertices * vertexSize;

	//build spheres at given centre
	const vec3 cntrLow = vec3(traj_data[offsetLow + 3*index], traj_data[offsetLow + 3*index + 1], traj_data[offsetLow + 3*index + 2]);
	const vec3 cntrHigh = vec3(traj_data[offsetUp + 3*index], traj_data[offsetUp + 3*index + 1], traj_data[offsetUp + 3*index + 2]);

	for(int i = 0; i < sphere_vertices; ++i) {		
		//pos
		ver_data[verIndex + i*vertexSize] = mix(cntrLow.x, cntrHigh.x, t) + sphere_data[3*i] * radius;
		ver_data[verIndex + i*vertexSize + 1] = mix(cntrLow.y, cntrHigh.y, t) + sphere_data[3*i+1] * radius;
		ver_data[verIndex + i*vertexSize + 2] = mix(cntrLow.z, cntrHigh.z, t) + sphere_data[3*i+2] * radius;		
	}
	
}

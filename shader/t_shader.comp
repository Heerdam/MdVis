#version 430 core

#define M_PI 3.141592653589
#define M_PI_2 6.2831853071

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (location = 1) uniform int atomCount;
layout (location = 2) uniform int steps; 
layout (location = 3) uniform vec3 dims;
layout (location = 4) uniform int cbc = 1;

layout(std430, binding = 1) coherent buffer traj {
	float traj_data[];
};

layout(std430, binding = 2) coherent buffer weights {
	float w_data[]; //12 * steps * atoms
};

layout(std430, binding = 3) coherent buffer tmp {
	float data[]; // x + tmp
};

void main() {
	
	const uint idx = gl_GlobalInvocationID.x;
	const uint offset_X = idx *  steps * 2;
	const uint offset_Tmp = idx *  steps * 2 + steps;

	if(cbc == 1){
		const float hx = dims.x;
		const float hy = dims.y;
		const float hz = dims.z;

		const float hx2 = hx/2.f;
		const float hy2 = hy/2.f;
		const float hz2 = hz/2.f;

		float osx = 0.f, osy = 0.f, osz = 0.f;
	
		//remove cyclic boundary conditions	
		for(uint i = 1; i < steps; ++i) {
			const uint offsetL = 3*idx + (i-1)*atomCount*3;
			const uint offsetH = 3*idx + i*atomCount*3;

			const float dx = traj_data[offsetH] - traj_data[offsetL];
			const float dy = traj_data[offsetH + 1] - traj_data[offsetL + 1];
			const float dz = traj_data[offsetH + 2] - traj_data[offsetL + 2];

			traj_data[offsetL] += osx * hx;
			traj_data[offsetL+1] += osy * hy;
			traj_data[offsetL+2] += osz * hz;

			osx += dx >= hx2 ? -1.f : dx <= -hx2 ? 1.f : 0.f;
			osy += dy >= hy2 ? -1.f : dy <= -hy2 ? 1.f : 0.f;
			osz += dz >= hz2 ? -1.f : dz <= -hz2 ? 1.f : 0.f;	
		}

		memoryBarrierBuffer();
	}
	
	const float t = 1.f / float(steps);
	const float m2 = (2.f * t) / 3.;
	const float m13 = t / 6.f;

	//dims
	for(uint k = 0; k < 3; ++k){

		//rhs
		for(uint i = 1; i < steps-1; ++i){

			const uint offsetL = 3*idx + (i-1)*atomCount*3 + k;
			const uint offsetM = 3*idx + i*atomCount*3 + k;
			const uint offsetH = 3*idx + (i+1)*atomCount*3 + k;

			data[offset_X + i] = (traj_data[offsetH] - traj_data[offsetM]) / t - (traj_data[offsetM] - traj_data[offsetL]) / t;
			data[offset_Tmp+i] = 0.f;
		}

		//boundary conditions
		data[offset_X] = 3.f * ((traj_data[3*idx + atomCount*3 + k] - traj_data[3*idx + k]) / t);
		data[offset_X + steps-1] = 3.0 * (-(traj_data[3*idx + (steps-1)*atomCount*3 + k] - traj_data[3*idx + (steps-2)*atomCount*3 + k]) / t);
		//solve
		data[offset_Tmp] = m13 / m2;
		data[offset_X] = data[offset_X] / m2;

		for (uint i = 1; i < steps; ++i) {
			const float m = 1.f / (m2 - m13 * data[i-1]);
			data[offset_Tmp+i] = m13 * m;
			data[offset_X+i] = (data[offset_X+i] - m13 * data[offset_X+i - 1]) * m;
		}

		for (uint i = steps - 2; i > 0; --i)
			data[offset_X + i] -= data[offset_Tmp+i] * data[offset_X+i + 1];
		data[offset_X] -= data[offset_Tmp] * data[offset_X+1];

		//calc weights
		for(uint i = 1; i < steps; ++i){

			const uint offsetL = 3*idx + (i-1)*atomCount*3 + k;
			const uint offsetM = 3*idx + i*atomCount*3 + k;

			const uint offset = 12*idx + (i-1)*atomCount*12 + k;

			w_data[offset] = traj_data[offsetL];
			w_data[offset + 3] = (traj_data[offsetM] - traj_data[offsetL]) / t - (t*(2*data[offset_X+i-1] + data[offset_X+i]))/6.f;
			w_data[offset + 6] = data[offset_X+i-1]/2.f;
			w_data[offset + 9] = (data[offset_X+i] - data[offset_X+i-1])/(6*t);
		}

	}
}

#version 430 core

#define M_PI 3.141592653589
#define M_PI_2 6.2831853071

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(location = 1) uniform int atomCount; //#atoms
layout(location = 2) uniform int maxSteps;
layout(location = 3) uniform float t; 
layout(location = 7) uniform float frac;

layout(location = 4) uniform int sphere_vertices;
layout(location = 5) uniform float radius;

layout(location = 6) uniform vec4 color;

layout (location = 8) uniform vec3 dims;

layout (location = 9) uniform int cbc = 1;

layout(std430, binding = 1) buffer traj {
	float traj_data[];
};

layout(std430, binding = 2) readonly buffer sphere {
	float sphere_data[];
};

layout(std430, binding = 3) writeonly buffer vertex {
	float ver_data[];
};

layout(std430, binding = 4) readonly buffer weights {
	float w_data[];
};

void main() {

	const int currentStep = int(float(maxSteps) * t) % maxSteps;
	const int offset = int(currentStep) * int(atomCount) * 3;
	const uint index = gl_GlobalInvocationID.x;
	const int vertexSize = 3;
	const uint verIndex = index * sphere_vertices * vertexSize;

	float h = t - currentStep*frac;
	const uint idx = 12* index + currentStep * atomCount * 12;

	const float hx = dims.x;
	const float hy = dims.y;
	const float hz = dims.z;

	vec3 pos = vec3(0.f);

	if(maxSteps > 1){
		vec3 m_a = vec3(w_data[idx], w_data[idx+1], w_data[idx+2]);
		vec3 m_b = vec3(w_data[idx+3], w_data[idx+4], w_data[idx+5]);
		vec3 m_c = vec3(w_data[idx+6], w_data[idx+7], w_data[idx+8]);
		vec3 m_d = vec3(w_data[idx+9], w_data[idx+10], w_data[idx+11]);

		pos = ((m_d * h + m_c) * h + m_b) * h + m_a;

		//cyclic boundary conditions
		if(cbc == 1){
			pos.x = pos.x > dims.x ? pos.x - hx : pos.x < 0.f ? pos.x + hx : pos.x;
			pos.y = pos.y > dims.y ? pos.y - hy : pos.y < 0.f ? pos.y + hy : pos.y;
			pos.z = pos.z > dims.z ? pos.z - hz : pos.z < 0.f ? pos.z + hz : pos.z;
		}
	} else
		pos = vec3(traj_data[offset + 3*index], traj_data[offset + 3*index + 1], traj_data[offset + 3*index + 2]);

	for(int i = 0; i < sphere_vertices; ++i) {		
		//pos
		ver_data[verIndex + i*vertexSize] = pos.x + sphere_data[3*i] * radius;
		ver_data[verIndex + i*vertexSize + 1] = pos.y + sphere_data[3*i+1] * radius;
		ver_data[verIndex + i*vertexSize + 2] = pos.z + sphere_data[3*i+2] * radius;		
	}
	
}
